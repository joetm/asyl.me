define([],function(){"use strict";var t=Math.PI/180,e=180/Math.PI,r=function(e,r){this.lon=e,this.lat=r,this.x=t*e,this.y=t*r};r.prototype.view=function(){return String(this.lon).slice(0,4)+","+String(this.lat).slice(0,4)},r.prototype.antipode=function(){var t=-1*this.lat,e=this.lon<0?180+this.lon:-1*(180-this.lon);return new r(e,t)};var s=function(){this.coords=[],this.length=0};s.prototype.move_to=function(t){this.length++,this.coords.push(t)};var i=function(t){this.properties=t||{},this.geometries=[]};i.prototype.json=function(){if(this.geometries.length<=0)return{geometry:{type:"LineString",coordinates:null},type:"Feature",properties:this.properties};if(1==this.geometries.length)return{geometry:{type:"LineString",coordinates:this.geometries[0].coords},type:"Feature",properties:this.properties};for(var t=[],e=0;e<this.geometries.length;e++)t.push(this.geometries[e].coords);return{geometry:{type:"MultiLineString",coordinates:t},type:"Feature",properties:this.properties}},i.prototype.wkt=function(){for(var t="",e="LINESTRING(",r=function(t){e+=t[0]+" "+t[1]+","},s=0;s<this.geometries.length;s++){if(0===this.geometries[s].coords.length)return"LINESTRING(empty)";var i=this.geometries[s].coords;i.forEach(r),t+=e.substring(0,e.length-1)+")"}return t};var o=function(t,e,s){if(!t||void 0===t.x||void 0===t.y)throw new Error("GreatCircle constructor expects two args: start and end objects with x and y properties");if(!e||void 0===e.x||void 0===e.y)throw new Error("GreatCircle constructor expects two args: start and end objects with x and y properties");this.start=new r(t.x,t.y),this.end=new r(e.x,e.y),this.properties=s||{};var i=this.start.x-this.end.x,o=this.start.y-this.end.y,h=Math.pow(Math.sin(o/2),2)+Math.cos(this.start.y)*Math.cos(this.end.y)*Math.pow(Math.sin(i/2),2);if(this.g=2*Math.asin(Math.sqrt(h)),this.g==Math.PI)throw new Error("it appears "+t.view()+" and "+e.view()+" are 'antipodal', e.g diametrically opposite, thus there is no single route but rather infinite");if(isNaN(this.g))throw new Error("could not calculate great circle between "+t+" and "+e)};o.prototype.interpolate=function(t){var r=Math.sin((1-t)*this.g)/Math.sin(this.g),s=Math.sin(t*this.g)/Math.sin(this.g),i=r*Math.cos(this.start.y)*Math.cos(this.start.x)+s*Math.cos(this.end.y)*Math.cos(this.end.x),o=r*Math.cos(this.start.y)*Math.sin(this.start.x)+s*Math.cos(this.end.y)*Math.sin(this.end.x),h=r*Math.sin(this.start.y)+s*Math.sin(this.end.y),n=e*Math.atan2(h,Math.sqrt(Math.pow(i,2)+Math.pow(o,2))),a=e*Math.atan2(o,i);return[a,n]},o.prototype.Arc=function(t,e){var r=[];if(!t||2>=t)r.push([this.start.lon,this.start.lat]),r.push([this.end.lon,this.end.lat]);else for(var o=1/(t-1),h=0;t>h;++h){var n=o*h,a=this.interpolate(n);r.push(a)}for(var p=!1,u=0,c=e&&e.offset?e.offset:10,l=180-c,g=-180+c,f=360-c,d=1;d<r.length;++d){var v=r[d-1][0],y=r[d][0],M=Math.abs(y-v);M>f&&(y>l&&g>v||v>l&&g>y)?p=!0:M>u&&(u=M)}var w=[];if(p&&c>u){var m=[];w.push(m);for(var x=0;x<r.length;++x){var F=parseFloat(r[x][0]);if(x>0&&Math.abs(F-r[x-1][0])>f){var b=parseFloat(r[x-1][0]),E=parseFloat(r[x-1][1]),I=parseFloat(r[x][0]),S=parseFloat(r[x][1]);if(b>-180&&g>b&&180==I&&x+1<r.length&&r[x-1][0]>-180&&r[x-1][0]<g){m.push([-180,r[x][1]]),x++,m.push([r[x][0],r[x][1]]);continue}if(b>l&&180>b&&-180==I&&x+1<r.length&&r[x-1][0]>l&&r[x-1][0]<180){m.push([180,r[x][1]]),x++,m.push([r[x][0],r[x][1]]);continue}if(g>b&&I>l){var N=b;b=I,I=N;var G=E;E=S,S=G}if(b>l&&g>I&&(I+=360),180>=b&&I>=180&&I>b){var L=(180-b)/(I-b),C=L*S+(1-L)*E;m.push([r[x-1][0]>l?180:-180,C]),m=[],m.push([r[x-1][0]>l?-180:180,C]),w.push(m)}else m=[],w.push(m);m.push([F,r[x][1]])}else m.push([r[x][0],r[x][1]])}}else{var j=[];w.push(j);for(var P=0;P<r.length;++P)j.push([r[P][0],r[P][1]])}for(var q=new i(this.properties),A=0;A<w.length;++A){var R=new s;q.geometries.push(R);for(var T=w[A],_=0;_<T.length;++_)R.move_to(T[_])}return q};var h={};return h.Coord=r,h.Arc=i,h.GreatCircle=o,h});